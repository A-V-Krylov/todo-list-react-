{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/user/projects/todo-list-react/src/Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Note from './Note.js';\nimport ButtonContainer from './ButtonContainer.js';\n\nfunction Form() {\n  _s();\n\n  const [notes, setNotes] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [filter, setFilter] = useState('all');\n  useEffect(() => {\n    getTodos();\n  }, []);\n  useEffect(() => {\n    filterNotes(filter);\n  }, [filter]);\n\n  const getTodos = () => {\n    try {\n      if (localStorage.getItem('todo')) {\n        setNotes(JSON.parse(localStorage.getItem('todo')));\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  const handleChange = event => {\n    setInputValue(event.target.value);\n  };\n\n  const addNote = event => {\n    event.preventDefault();\n    console.log([notes]);\n    /* if (inputValue.trim().length > 0) {\n          \n         let todoList = [...notes];\n         let allNotes = { text: inputValue, check: false, id: Math.ceil(Math.random() * 10000) };\n         let i = todoList.length;\n         todoList[i] = allNotes;\n          localStorage.setItem('todo', JSON.stringify(todoList));\n         setNotes(todoList);\n         setInputValue('');\n     } */\n  };\n\n  const onCheckChange = id => {\n    let todoList = JSON.parse(localStorage.getItem('todo'));\n    const index = todoList.findIndex(el => el.id == id);\n    todoList[index].check = !todoList[index].check;\n    localStorage.setItem('todo', JSON.stringify(todoList));\n    setNotes(todoList);\n    filterNotes(filter);\n  };\n\n  const onDelete = id => {\n    let todoList = JSON.parse(localStorage.getItem('todo'));\n    const index = todoList.findIndex(el => el.id == id);\n    todoList.splice(index, 1);\n    localStorage.setItem('todo', JSON.stringify(todoList));\n    setNotes(todoList);\n  };\n\n  const onDeleteAll = () => {\n    let todoList = JSON.parse(localStorage.getItem('todo'));\n    todoList = todoList.filter(el => {\n      return el.check === false;\n    });\n    localStorage.setItem('todo', JSON.stringify(todoList));\n    setNotes(todoList);\n  };\n\n  const crossOutAllNotes = () => {\n    let todoList = JSON.parse(localStorage.getItem('todo'));\n    todoList.map(obj => {\n      return obj.check = true;\n    });\n    localStorage.setItem('todo', JSON.stringify(todoList));\n    setNotes(todoList);\n  };\n\n  const onAllNotes = () => {\n    setFilter('all');\n  };\n\n  const onActiveNotes = () => {\n    setFilter('active');\n  };\n\n  const onCompletedNotes = () => {\n    setFilter('completed');\n  };\n\n  const filterNotes = el => {\n    let todoList = JSON.parse(localStorage.getItem('todo'));\n\n    if (el === 'all') {\n      setNotes(todoList);\n    } else if (el === 'active') {\n      let activeNotes = todoList.filter(el => {\n        return el.check === false;\n      });\n      setNotes(activeNotes);\n    } else if (el === 'completed') {\n      let completedNotes = todoList.filter(el => {\n        return el.check === true;\n      });\n      setNotes(completedNotes);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa fa-angle-down\",\n          onClick: crossOutAllNotes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input\",\n          placeholder: \"What needs to be done?\",\n          onChange: handleChange,\n          value: inputValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button add-button\",\n          onClick: addNote,\n          type: \"submit\",\n          children: \"add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-notes all-notes\",\n        children: notes && notes.map((item, i) => /*#__PURE__*/_jsxDEV(Note, {\n          check: item.check,\n          x: i,\n          id: item.id,\n          text: item.text,\n          onChange: onCheckChange,\n          onClick: onDelete\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ButtonContainer, {\n      activeButton: filter,\n      all: onAllNotes,\n      active: onActiveNotes,\n      completed: onCompletedNotes,\n      clearComplered: onDeleteAll\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Form, \"E46Tgnk/yIQdkAmOhth3mWpZ4Tg=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/home/user/projects/todo-list-react/src/Form.js"],"names":["React","useState","useEffect","Note","ButtonContainer","Form","notes","setNotes","inputValue","setInputValue","filter","setFilter","getTodos","filterNotes","localStorage","getItem","JSON","parse","err","console","log","handleChange","event","target","value","addNote","preventDefault","onCheckChange","id","todoList","index","findIndex","el","check","setItem","stringify","onDelete","splice","onDeleteAll","crossOutAllNotes","map","obj","onAllNotes","onActiveNotes","onCompletedNotes","activeNotes","completedNotes","item","i","text"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Note from './Note.js';\nimport ButtonContainer from './ButtonContainer.js'\n\n\n\nfunction Form() {\n\n\n    const [notes, setNotes] = useState([]);\n    const [inputValue, setInputValue] = useState('');\n    const [filter, setFilter] = useState('all');\n\n    useEffect(() => {\n        getTodos();\n    }, []);\n\n    useEffect(() => {\n        filterNotes(filter);\n    }, [filter]);\n\n    const getTodos = () => {\n        try {\n            if (localStorage.getItem('todo')) {\n                setNotes(JSON.parse(localStorage.getItem('todo')));\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    const handleChange = (event) => {\n        setInputValue(event.target.value);\n    }\n\n    const addNote = (event) => {\n        event.preventDefault();\n        console.log([notes])\n       /* if (inputValue.trim().length > 0) {\n\n            \n            let todoList = [...notes];\n            let allNotes = { text: inputValue, check: false, id: Math.ceil(Math.random() * 10000) };\n            let i = todoList.length;\n            todoList[i] = allNotes;\n\n            localStorage.setItem('todo', JSON.stringify(todoList));\n            setNotes(todoList);\n            setInputValue('');\n        } */\n    }\n\n    const onCheckChange = (id) => {\n        let todoList = JSON.parse(localStorage.getItem('todo'));\n        const index = todoList.findIndex(el => el.id == id);\n        todoList[index].check = !todoList[index].check;\n        localStorage.setItem('todo', JSON.stringify(todoList));\n          setNotes(todoList);\n        filterNotes(filter);\n    }\n\n    const onDelete = (id) => {\n        let todoList = JSON.parse(localStorage.getItem('todo'));\n        const index = todoList.findIndex(el => el.id == id);\n        todoList.splice(index, 1);\n        localStorage.setItem('todo', JSON.stringify(todoList));\n        setNotes(todoList);\n    }\n\n    const onDeleteAll = () => {\n        let todoList = JSON.parse(localStorage.getItem('todo'));\n        todoList = todoList.filter((el) => {\n            return el.check === false;\n        });\n        localStorage.setItem('todo', JSON.stringify(todoList));\n        setNotes(todoList);\n    }\n\n    const crossOutAllNotes = () => {\n        let todoList = JSON.parse(localStorage.getItem('todo'));\n        todoList.map((obj) => {\n            return obj.check = true;\n        });\n        localStorage.setItem('todo', JSON.stringify(todoList));\n        setNotes(todoList);\n    }\n\n    const onAllNotes = () => {\n        setFilter('all');\n    }\n\n    const onActiveNotes = () => {\n        setFilter('active');\n    }\n\n    const onCompletedNotes = () => {\n        setFilter('completed');\n    }\n\n    const filterNotes = (el) => {\n        let todoList = JSON.parse(localStorage.getItem('todo'));\n\n        if (el === 'all') {\n            setNotes(todoList);\n        }\n        else if (el === 'active') {\n            let activeNotes = todoList.filter((el) => {\n                return el.check === false;\n            });\n            setNotes(activeNotes);\n\n        }\n        else if (el === 'completed') {\n            let completedNotes = todoList.filter((el) => {\n                return el.check === true;\n            });\n            setNotes(completedNotes);\n        }\n    }\n    \n\n    return (\n        <div>\n            <form className=\"form-container\">\n                <div className=\"input-container\">\n                    <i className=\"fa fa-angle-down\" onClick={crossOutAllNotes}></i>\n                    <input className=\"input\" placeholder=\"What needs to be done?\" onChange={handleChange} value={inputValue} />\n                    <button className=\"button add-button\" onClick={addNote} type=\"submit\">add</button>\n                </div>\n                <div className=\"list-notes all-notes\">\n                    {notes && notes.map((item, i) => (\n                        <Note key={item.id} check={item.check} x={i} id={item.id} text={item.text} onChange={onCheckChange} onClick={onDelete} />\n                    ))}\n                </div>\n            </form>\n            <ButtonContainer activeButton={filter} all={onAllNotes} active={onActiveNotes} completed={onCompletedNotes} clearComplered={onDeleteAll}/>\n        </div>\n    )\n}\nexport default Form;\n\n\n  \n  "]},"metadata":{},"sourceType":"module"}