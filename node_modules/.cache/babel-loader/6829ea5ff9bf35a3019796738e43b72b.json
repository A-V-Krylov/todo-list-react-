{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/user/projects/todo-list-react/src/Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Notes from './Notes.js';\n/*\nlocalStorage.setItem(key, value) – сохранить пару ключ/значение.\nlocalStorage.getItem(key) – получить данные по ключу key.\nlocalStorage.removeItem(key) – удалить данные с ключом key.\nlocalStorage.clear() – удалить всё.\nlocalStorage.key(index) – получить ключ на заданной позиции.\nlocalStorage.length – количество элементов в хранилище.\nJSON.parse(localStorage.getItem('todo')); - получить \nlocalStorage.setItem('todo', JSON.stringify(todoList)); - сохранить\n*/\n\nfunction Form() {\n  _s();\n\n  const [notes, setNotes] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n\n  function getTodos() {\n    try {\n      setNotes(JSON.parse(localStorage.getItem('todo')));\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  useEffect(() => {\n    console.log(123);\n    getTodos();\n  }, []);\n\n  function handleChange(event) {\n    setInputValue(event.target.value);\n  }\n\n  function addNote(event) {\n    event.preventDefault();\n    let todoList = [...notes]; /// why this way?\n\n    console.log(inputValue);\n    localStorage.setItem('todo', JSON.stringify(todoList));\n    setNotes(todoList);\n    console.log('add todo', todoList);\n    /* const input = document.querySelector('.input');\n     if (input.value.trim().length > 0) {\n         let allNotes = {};\n         allNotes.text = input.value;\n         allNotes.check = false;\n         allNotes.id = Math.ceil(Math.random() * 10000);\n         let todoList;\n         !localStorage.length ? todoList = [] : todoList = JSON.parse(localStorage.getItem('todo'));\n         let i = todoList.length;\n         todoList[i] = allNotes;\n         localStorage.setItem('todo', JSON.stringify(todoList));\n        \n         input.value = '';\n     } */\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"input\",\n        placeholder: \"What needs to be done?\",\n        onSubmit: () => console.log('aaaaa'),\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button add-button\",\n        onClick: addNote,\n        type: \"submit\",\n        children: \"add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"list-notes all-notes\",\n      children: notes && notes.map((item, i) => /*#__PURE__*/_jsxDEV(Notes, {\n        check: item.check,\n        x: i,\n        id: item.id,\n        text: item.text\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"button account-active\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button all-button current\",\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button active-button\",\n          children: \"Active\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button completed-button\",\n          children: \"Completed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button clear-complered\",\n        children: \"Clear complered\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Form, \"aFFJR4a9XQDEiPblQ2NTzexrhAw=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/home/user/projects/todo-list-react/src/Form.js"],"names":["React","useState","useEffect","Notes","Form","notes","setNotes","inputValue","setInputValue","getTodos","JSON","parse","localStorage","getItem","err","console","log","handleChange","event","target","value","addNote","preventDefault","todoList","setItem","stringify","map","item","i","check","id","text"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport Notes from './Notes.js'\n\n\n/*\nlocalStorage.setItem(key, value) – сохранить пару ключ/значение.\nlocalStorage.getItem(key) – получить данные по ключу key.\nlocalStorage.removeItem(key) – удалить данные с ключом key.\nlocalStorage.clear() – удалить всё.\nlocalStorage.key(index) – получить ключ на заданной позиции.\nlocalStorage.length – количество элементов в хранилище.\nJSON.parse(localStorage.getItem('todo')); - получить \nlocalStorage.setItem('todo', JSON.stringify(todoList)); - сохранить\n*/\n\nfunction Form() {\n\n    const [notes, setNotes] = useState([]);\n    const [inputValue, setInputValue] = useState('');\n    \n    function getTodos() {\n        try {\n            setNotes(JSON.parse(localStorage.getItem('todo')));\n        } catch(err) {\n            console.log(err);\n        }\n    }\n   \n    useEffect(() => {\n        console.log(123)\n        getTodos();\n    }, []);\n\n    function handleChange(event) {\n        setInputValue(event.target.value);\n      }\n\n    function addNote(event) {\n        event.preventDefault();\n        let todoList = [...notes];  /// why this way?\n        console.log(inputValue)\n        localStorage.setItem('todo', JSON.stringify(todoList));\n        setNotes(todoList);\n        console.log('add todo', todoList);\n\n        /* const input = document.querySelector('.input');\n         if (input.value.trim().length > 0) {\n             let allNotes = {};\n             allNotes.text = input.value;\n             allNotes.check = false;\n             allNotes.id = Math.ceil(Math.random() * 10000);\n             let todoList;\n             !localStorage.length ? todoList = [] : todoList = JSON.parse(localStorage.getItem('todo'));\n             let i = todoList.length;\n             todoList[i] = allNotes;\n             localStorage.setItem('todo', JSON.stringify(todoList));\n            \n             input.value = '';\n         } */\n    }\n\n    return (\n        <form className=\"form-container\" >\n            <div className=\"input-container\">\n                <input className=\"input\" placeholder=\"What needs to be done?\" onSubmit={() => console.log('aaaaa')} onChange={handleChange}/>\n                <button className=\"button add-button\" onClick={addNote} type=\"submit\">add</button>\n            </div>\n            <div className=\"list-notes all-notes\">\n                {notes && notes.map((item, i) => (\n                    <Notes key={item.id} check={item.check} x={i} id={item.id} text={item.text} />\n                ))}\n            </div>\n\n            <div className=\"button-container\">\n                <p className=\"button account-active\"></p>\n                <span>\n                    <button className='button all-button current'>All</button>\n                    <button className='button active-button'>Active</button>\n                    <button className='button completed-button'>Completed</button>\n                </span>\n                <button className='button clear-complered'>Clear complered</button>\n            </div>\n        </form>\n    )\n}\n\nexport default Form;\n\n\n"]},"metadata":{},"sourceType":"module"}