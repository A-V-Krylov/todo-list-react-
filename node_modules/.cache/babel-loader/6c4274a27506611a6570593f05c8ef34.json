{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/user/projects/todo-list-react/src/Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Note from './Note.js';\nimport ButtonContainer from './ButtonContainer.js';\n\nfunction Form() {\n  _s();\n\n  const [notes, setNotes] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [filter, setFilter] = useState('');\n  const [isOnline, setIsOnline] = useState(null);\n  useEffect(() => {\n    function handleStatusChange(status) {\n      setIsOnline(status.isOnline);\n    }\n\n    ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n    return () => {\n      ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n    };\n  });\n  /* if ('all') {\n       let todoList = JSON.parse(localStorage.getItem('todo'));\n       setNotes(todoList);\n   }\n   else if ('active') {\n       let todoList = JSON.parse(localStorage.getItem('todo'));\n       let activeNotes = todoList.filter((el) => {\n           return el.check === false;\n       });\n       setNotes(activeNotes);\n    }\n   else if ('completed') {\n       let todoList = JSON.parse(localStorage.getItem('todo'));\n       let completedNotes = todoList.filter((el) => {\n           return el.check === true;\n       });\n       setNotes(completedNotes);\n   } */\n\n  const getTodos = () => {\n    try {\n      if (localStorage.getItem('todo')) {\n        setNotes(JSON.parse(localStorage.getItem('todo')));\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    getTodos();\n  }, []);\n\n  const handleChange = event => {\n    setInputValue(event.target.value);\n  };\n\n  const addNote = event => {\n    event.preventDefault();\n\n    if (inputValue.trim().length > 0) {\n      let todoList = [...notes];\n      let allNotes = {\n        text: inputValue,\n        check: false,\n        id: Math.ceil(Math.random() * 10000)\n      };\n      let i = todoList.length;\n      todoList[i] = allNotes;\n      localStorage.setItem('todo', JSON.stringify(todoList));\n      setNotes(todoList);\n      setInputValue('');\n    }\n  };\n\n  const onCheckChange = id => {\n    let todoList = JSON.parse(localStorage.getItem('todo'));\n    const index = todoList.findIndex(el => el.id == id);\n    todoList[index].check = !todoList[index].check;\n    localStorage.setItem('todo', JSON.stringify(todoList));\n    setNotes(todoList);\n  };\n\n  const onDelete = id => {\n    let todoList = JSON.parse(localStorage.getItem('todo'));\n    const index = todoList.findIndex(el => el.id == id);\n    todoList.splice(index, 1);\n    localStorage.setItem('todo', JSON.stringify(todoList));\n    setNotes(todoList);\n  };\n\n  const onDeleteAll = e => {\n    let todoList = JSON.parse(localStorage.getItem('todo'));\n    todoList = todoList.filter(el => {\n      return el.check === false;\n    });\n    localStorage.setItem('todo', JSON.stringify(todoList));\n    setNotes(todoList);\n  };\n\n  const crossOutAllNotes = () => {\n    let todoList = JSON.parse(localStorage.getItem('todo'));\n    todoList.map(obj => {\n      return obj.check = true;\n    });\n    localStorage.setItem('todo', JSON.stringify(todoList));\n    setNotes(todoList);\n  };\n  /*------------------------*/\n\n\n  const calassCurrent = e => {};\n\n  const onAllNotes = e => {\n    /*let todoList = JSON.parse(localStorage.getItem('todo'));\n    setNotes(todoList);*/\n  };\n\n  const onActiveNotes = e => {\n    /* let todoList = JSON.parse(localStorage.getItem('todo'));\n     let activeNotes = todoList.filter((el) => {\n         return el.check === false;\n     });\n     setNotes(activeNotes); */\n  };\n\n  const onCompletedNotes = e => {\n    /*  let todoList = JSON.parse(localStorage.getItem('todo'));\n      let completedNotes = todoList.filter((el) => {\n          return el.check === true;\n      });\n      setNotes(completedNotes); */\n  };\n  /*---------------------------------*/\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa fa-angle-down\",\n          onClick: crossOutAllNotes\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input\",\n          placeholder: \"What needs to be done?\",\n          onChange: handleChange,\n          value: inputValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"button add-button\",\n          onClick: addNote,\n          type: \"submit\",\n          children: \"add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"list-notes all-notes\",\n        children: notes && notes.map((item, i) => /*#__PURE__*/_jsxDEV(Note, {\n          check: item.check,\n          x: i,\n          id: item.id,\n          text: item.text,\n          onChange: onCheckChange,\n          onClick: onDelete\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ButtonContainer, {\n      all: onAllNotes,\n      active: onActiveNotes,\n      completed: onCompletedNotes,\n      clearComplered: onDeleteAll\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Form, \"PoXkMA+G4M0WvnFs5ea7R/VdH7I=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["/home/user/projects/todo-list-react/src/Form.js"],"names":["React","useState","useEffect","Note","ButtonContainer","Form","notes","setNotes","inputValue","setInputValue","filter","setFilter","isOnline","setIsOnline","handleStatusChange","status","ChatAPI","subscribeToFriendStatus","props","friend","id","unsubscribeFromFriendStatus","getTodos","localStorage","getItem","JSON","parse","err","console","log","handleChange","event","target","value","addNote","preventDefault","trim","length","todoList","allNotes","text","check","Math","ceil","random","i","setItem","stringify","onCheckChange","index","findIndex","el","onDelete","splice","onDeleteAll","e","crossOutAllNotes","map","obj","calassCurrent","onAllNotes","onActiveNotes","onCompletedNotes","item"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Note from './Note.js';\nimport ButtonContainer from './ButtonContainer.js'\n\n\n\nfunction Form() {\n\n\n    const [notes, setNotes] = useState([]);\n    const [inputValue, setInputValue] = useState('');\n\n    const [filter, setFilter] = useState('');\n\n    const [isOnline, setIsOnline] = useState(null);\n    useEffect(() => {\n      function handleStatusChange(status) {\n        setIsOnline(status.isOnline);\n      }\n      ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange);\n      return () => {\n        ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange);\n      };\n    });\n\n   /* if ('all') {\n        let todoList = JSON.parse(localStorage.getItem('todo'));\n        setNotes(todoList);\n    }\n    else if ('active') {\n        let todoList = JSON.parse(localStorage.getItem('todo'));\n        let activeNotes = todoList.filter((el) => {\n            return el.check === false;\n        });\n        setNotes(activeNotes);\n\n    }\n    else if ('completed') {\n        let todoList = JSON.parse(localStorage.getItem('todo'));\n        let completedNotes = todoList.filter((el) => {\n            return el.check === true;\n        });\n        setNotes(completedNotes);\n    } */\n    \n    const getTodos = () => {\n        try {\n            if (localStorage.getItem('todo')) {\n                setNotes(JSON.parse(localStorage.getItem('todo')));\n            }\n        } catch (err) {\n            console.log(err);\n        }\n    }\n\n    useEffect(() => {\n        getTodos();\n    }, []);\n\n\n    const handleChange = (event) => {\n        setInputValue(event.target.value);\n    }\n\n    const addNote = (event) => {\n        event.preventDefault();\n        if (inputValue.trim().length > 0) {\n\n            let todoList = [...notes];\n            let allNotes = { text: inputValue, check: false, id: Math.ceil(Math.random() * 10000) };\n            let i = todoList.length;\n            todoList[i] = allNotes;\n\n            localStorage.setItem('todo', JSON.stringify(todoList));\n            setNotes(todoList);\n            setInputValue('');\n        }\n    }\n\n    const onCheckChange = (id) => {\n        let todoList = JSON.parse(localStorage.getItem('todo'));\n        const index = todoList.findIndex(el => el.id == id);\n        todoList[index].check = !todoList[index].check;\n        localStorage.setItem('todo', JSON.stringify(todoList));\n        setNotes(todoList);\n    }\n\n    const onDelete = (id) => {\n        let todoList = JSON.parse(localStorage.getItem('todo'));\n        const index = todoList.findIndex(el => el.id == id);\n        todoList.splice(index, 1);\n        localStorage.setItem('todo', JSON.stringify(todoList));\n        setNotes(todoList);\n    }\n\n    const onDeleteAll = (e) => {\n        let todoList = JSON.parse(localStorage.getItem('todo'));\n        todoList = todoList.filter((el) => {\n            return el.check === false;\n        });\n        localStorage.setItem('todo', JSON.stringify(todoList));\n        setNotes(todoList);\n    }\n\n    const crossOutAllNotes = () => {\n        let todoList = JSON.parse(localStorage.getItem('todo'));\n        todoList.map((obj) => {\n            return obj.check = true;\n        });\n        localStorage.setItem('todo', JSON.stringify(todoList));\n        setNotes(todoList);\n    }\n\n\n\n    /*------------------------*/\n\n    const calassCurrent = (e) => {\n\n    }\n\n    const onAllNotes = (e) => {\n        /*let todoList = JSON.parse(localStorage.getItem('todo'));\n        setNotes(todoList);*/\n    }\n\n    const onActiveNotes = (e) => {\n\n        /* let todoList = JSON.parse(localStorage.getItem('todo'));\n         let activeNotes = todoList.filter((el) => {\n             return el.check === false;\n         });\n         setNotes(activeNotes); */\n\n    }\n\n    const onCompletedNotes = (e) => {\n        /*  let todoList = JSON.parse(localStorage.getItem('todo'));\n          let completedNotes = todoList.filter((el) => {\n              return el.check === true;\n          });\n          setNotes(completedNotes); */\n    }\n    /*---------------------------------*/\n\n    return (\n        <div>\n            <form className=\"form-container\">\n                <div className=\"input-container\">\n                    <i className=\"fa fa-angle-down\" onClick={crossOutAllNotes}></i>\n                    <input className=\"input\" placeholder=\"What needs to be done?\" onChange={handleChange} value={inputValue} />\n                    <button className=\"button add-button\" onClick={addNote} type=\"submit\">add</button>\n                </div>\n                <div className=\"list-notes all-notes\">\n                    {notes && notes.map((item, i) => (\n                        <Note key={item.id} check={item.check} x={i} id={item.id} text={item.text} onChange={onCheckChange} onClick={onDelete} />\n                    ))}\n                </div>\n\n            </form>\n            <ButtonContainer all={onAllNotes} active={onActiveNotes} completed={onCompletedNotes} clearComplered={onDeleteAll} />\n        </div>\n    )\n}\n\nexport default Form;\n\n\n"]},"metadata":{},"sourceType":"module"}